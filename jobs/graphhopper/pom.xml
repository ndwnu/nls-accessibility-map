<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>nu.ndw.nls.accessibilitymap</groupId>
        <artifactId>jobs</artifactId>
        <version>3.1.3-SNAPSHOT</version>
    </parent>
    <artifactId>graphhopper-job</artifactId>
    <name>NLS Accessibility Map generate Graphhopper job</name>
    <dependencies>
        <dependency>
            <groupId>nu.ndw.nls.accessibilitymap</groupId>
            <version>${project.parent.version}</version>
            <artifactId>shared</artifactId>
        </dependency>
        <dependency>
            <groupId>nu.ndw.nls.accessibilitymap</groupId>
            <version>${project.parent.version}</version>
            <artifactId>trafficsignclient</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <dependency>
            <groupId>info.picocli</groupId>
            <artifactId>picocli-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>nu.ndw.nls</groupId>
            <artifactId>routing-map-matcher-library</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>nu.ndw</groupId>
            <artifactId>nls-events</artifactId>
        </dependency>
        <dependency>
            <groupId>nu.ndw.nls.springboot</groupId>
            <artifactId>messaging</artifactId>
        </dependency>
        <dependency>
            <groupId>nu.ndw.nls.springboot</groupId>
            <artifactId>monitoring</artifactId>
        </dependency>
        <dependency>
            <groupId>nu.ndw.nls.geometry</groupId>
            <artifactId>nls-geometry</artifactId>
        </dependency>
        <dependency>
            <groupId>com.conductor</groupId>
            <artifactId>stream-utils</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <defaultGoal>clean verify</defaultGoal>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <!-- We will containerize the application, we don't need a jar in our artifactory -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-jar-for-docker</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                    <type>jar</type>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>../../docker/nls-accessibility-map-graphhopper-job</outputDirectory>
                                    <destFileName>application.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>regression-test</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>docker-compose-down</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments combine.children="append">
                                        <argument>down</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-compose-up-infra</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments combine.children="append">
                                        <argument>up</argument>
                                        <argument>--build</argument>
                                        <argument>-d</argument>
                                        <argument>nls-postgres</argument>
                                        <argument>nls-rabbitmq</argument>
                                        <argument>traffic-sign-api-stub</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-compose-build-nls-accessibility-map-graphhopper-job</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments combine.children="append">
                                        <argument>build</argument>
                                        <argument>nls-accessibility-map-graphhopper-job</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <!-- Make sure that this folder is read write by all for the build pipeline to allow docker
                                 user 1000 to write on the volume mount. -->
                            <execution>
                                <id>chmod-777-graphhopper</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments>
                                        <argument>777</argument>
                                        <argument>../../graphhopper</argument>
                                    </arguments>
                                    <executable>chmod</executable>
                                </configuration>
                            </execution>
                            <execution>
                                <id>wait-for-database</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <commandlineArgs>../../scripts/pg-isready.sh</commandlineArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>wait-for-rabbitmq</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <commandlineArgs>../../scripts/rabbit-isready.sh</commandlineArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-compose-build-nls-accessibility-graphhopper-configure-rabbit</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments combine.children="append">
                                        <argument>run</argument>
                                        <argument>nls-messaging-configurator-graphhopper</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-compose-run-create-or-update-network</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments combine.children="append">
                                        <argument>run</argument>
                                        <argument>-e</argument>
                                        <argument>COMMAND=createOrUpdateNetwork</argument>
                                        <argument>nls-accessibility-map-graphhopper-job</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-compose-stop</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments combine.children="append">
                                        <argument>stop</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <arguments>
                                <argument>compose</argument>
                                <argument>--env-file</argument>
                                <argument>../../.env</argument>
                            </arguments>
                            <executable>docker</executable>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
