<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>nu.ndw.nls.accessibilitymap</groupId>
        <artifactId>parent</artifactId>
        <version>5.0.0-SNAPSHOT</version>
    </parent>

    <artifactId>backend</artifactId>

    <version>5.0.0-SNAPSHOT</version>
    <name>NLS Accessibility Map Backend</name>

    <description>Accessibility Map REST API</description>

    <properties>
        <openapi-generator.base.classpath>nu.ndw.nls.accessibilitymap.backend.generated
        </openapi-generator.base.classpath>
    </properties>

    <dependencies>
        <dependency>
            <groupId>nu.ndw.nls.accessibilitymap</groupId>
            <artifactId>accessibility</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <!--Spring dependencies-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>nu.ndw.nls.springboot</groupId>
            <artifactId>logging</artifactId>
        </dependency>
        <dependency>
            <groupId>nu.ndw.nls.springboot</groupId>
            <artifactId>monitoring</artifactId>
        </dependency>
        <dependency>
            <groupId>nu.ndw.nls.springboot</groupId>
            <artifactId>security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        </dependency>

        <!--Additional dependencies-->
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>nu.ndw.nls.geojson.geometry</groupId>
            <artifactId>geometry-jts</artifactId>
        </dependency>

        <!--Test dependencies-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.intuit.karate</groupId>
            <artifactId>karate-junit5</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- This dependency is used to force the build
                    order to first build and run the graphhopper-job< module.
                 -->
        <dependency>
            <groupId>nu.ndw.nls.accessibilitymap</groupId>
            <artifactId>graphhopper-job</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- This dependency is used to force the build
                order to first build and run the traffic-sign module.
                this is done to ensure a traffic sign file on disk exists
             -->
        <dependency>
            <groupId>nu.ndw.nls.accessibilitymap</groupId>
            <artifactId>traffic-sign</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.keycloak</groupId>
            <artifactId>keycloak-authz-client</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>nu.ndw.nls.springboot</groupId>
            <artifactId>test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <!-- We will containerize the application, we don't need a jar in our artifactory -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-jar-for-docker</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                    <type>jar</type>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>../docker/nls-accessibility-map-api</outputDirectory>
                                    <destFileName>application.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-api-yml-resource</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.outputDirectory}/static/api-docs</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>
                                        ../specification/src/main/resources/nu/ndw/nls/accessibilitymap/specification
                                    </directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-test-source</id>
                        <phase>generate-test-sources</phase>
                        <goals>
                            <goal>add-test-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>src/test-integration/java</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-test-resource</id>
                        <phase>generate-test-resources</phase>
                        <goals>
                            <goal>add-test-resource</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>src/test-integration/resources</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.openapitools</groupId>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>generate-open-api</id>
                        <configuration>
                            <!-- Package for the api side of things -->
                            <apiPackage>${openapi-generator.base.classpath}.api.v1</apiPackage>
                            <!-- Package for the model (or domain) side of things -->
                            <modelPackage>${openapi-generator.base.classpath}.model.v1</modelPackage>

                            <configOptions>
                                <useSpringBoot3>true</useSpringBoot3>
                                <generatedConstructorWithRequiredArgs>false</generatedConstructorWithRequiredArgs>

                                <!-- Whether to generate the server files using the delegate pattern -->
                                <delegatePattern>true</delegatePattern>

                                <!-- Whether to generate only API interface stubs without the server files. -->
                                <interfaceOnly>false</interfaceOnly>

                                <!-- Use Optional container for optional parameters -->
                                <useOptional>false</useOptional>

                                <!-- Split endpoints into different classes according to tags -->
                                <useTags>true</useTags>
                                <!-- use and perform jakarta validation-->
                                <useBeanValidation>true</useBeanValidation>
                                <performBeanValidation>true</performBeanValidation>

                                <!--
                                  OpenAPI Jackson Nullable library
                                  https://github.com/OpenAPITools/jackson-databind-nullable
                                 -->
                                <openApiNullable>false</openApiNullable>

                                <additionalModelTypeAnnotations>
                                    @lombok.experimental.SuperBuilder
                                    @lombok.NoArgsConstructor
                                    @lombok.AllArgsConstructor
                                </additionalModelTypeAnnotations>
                            </configOptions>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>regression-test</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>docker-compose-down</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments combine.children="append">
                                        <argument>down</argument>
                                        <argument>--remove-orphans</argument>
                                    </arguments>
                                </configuration>
                            </execution>

                            <execution>
                                <id>docker-compose-up-infra</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments combine.children="append">
                                        <argument>up</argument>
                                        <argument>-d</argument>
                                        <argument>nls-postgres</argument>
                                        <argument>nls-keycloak</argument>
                                        <argument>nls-rabbitmq</argument>
                                        <argument>accessibility-wiremock-stub</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>wait-for-rabbitmq</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <commandlineArgs>../scripts/rabbit-isready.sh</commandlineArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>wait-for-database</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <commandlineArgs>../scripts/pg-isready.sh</commandlineArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-compose-run-graphhopper-configureRabbitMQ</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments combine.children="append">
                                        <argument>run</argument>
                                        <argument>nls-accessibility-map-graphhopper-configure-rabbitmq</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>publish-event-nwb-imported</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>bash</executable>
                                    <commandlineArgs>../scripts/publish-event-nwb-imported.sh</commandlineArgs>
                                </configuration>
                            </execution>
                            <execution>
                                <id>chmod-777-maps</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments>
                                        <argument>777</argument>
                                        <argument>../.tmp/graphhopper</argument>
                                        <argument>../.tmp/trafficsigns</argument>
                                    </arguments>
                                    <executable>chmod</executable>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-compose-run-graphhopper-createOrUpdateNetwork</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments combine.children="append">
                                        <argument>run</argument>
                                        <argument>--build</argument>
                                        <argument>nls-accessibility-map-graphhopper-job</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-compose-run-traffic-sign-update-cache-job</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments combine.children="append">
                                        <argument>run</argument>
                                        <argument>--build</argument>
                                        <argument>nls-accessibility-map-traffic-sign-update-cache-job</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-compose-start-nls-accessibility-map-api</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments combine.children="append">
                                        <argument>up</argument>
                                        <argument>-d</argument>
                                        <argument>--build</argument>
                                        <argument>nls-accessibility-map-api</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>docker-compose-stop</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <arguments combine.children="append">
                                        <argument>stop</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <arguments>
                                <argument>compose</argument>
                            </arguments>
                            <executable>docker</executable>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
